// Copyright (c) 2022 Yuki Kishimoto
// Distributed under the MIT software license

namespace nostr {};

[Error]
interface NostrError {
    Generic(string msg);
};

enum KindBase {
    "Metadata",
    "TextNote",
    "RecommendRelay",
    "ContactList",
    "EncryptedDirectMessage",
    "EventDeletion",
    "Boost",
    "Reaction",
    "ChannelCreation",
    "ChannelMetadata",
    "ChannelMessage",
    "ChannelHideMessage",
    "ChannelMuteUser",
};

[Enum]
interface Kind {
    Base(KindBase kind);
    Custom(u16 kind);
};

interface Keys {
    [Throws=NostrError]
    constructor(string sk);
    [Throws=NostrError, Name=from_public_key]
    constructor(string pk);
    [Throws=NostrError, Name=from_bech32_public_key]
    constructor(string pk);
    [Throws=NostrError, Name=from_bech32]
    constructor(string sk);
    [Name=generate_from_os_random]
    constructor();
    string public_key();
    [Throws=NostrError]
    string secret_key();
};

interface SubscriptionFilter {
    constructor();
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter id(string id);
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter ids(sequence<string> ids);
    [Self=ByArc]
    SubscriptionFilter kind(Kind kind);
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter event(string event_id);
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter pubkey(string pubkey);
    [Self=ByArc]
    SubscriptionFilter since(u64 timestamp);
    [Self=ByArc]
    SubscriptionFilter until(u64 timestamp);
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter authors(sequence<string> authors);
};

interface Event {
    string pubkey();
    Kind kind();
    string content();
    [Throws=NostrError, Name=new_generic]
    constructor(Keys keys, Kind kind, string content, sequence<sequence<string>> tags);
    [Throws=NostrError, Name=set_metadata]
    constructor(Keys keys, AccountMetadata metadata);
    [Throws=NostrError, Name=add_recommended_relay]
    constructor(Keys keys, string url);
    [Throws=NostrError, Name=new_text_note]
    constructor(Keys keys, string content, sequence<sequence<string>> tags);
    [Throws=NostrError, Name=new_pow_text_note]
    constructor(Keys keys, string content, sequence<sequence<string>> tags, u8 difficulty);
    [Throws=NostrError, Name=set_contact_list]
    constructor(Keys keys, sequence<Contact> list);
    [Throws=NostrError, Name=new_encrypted_direct_msg]
    constructor(Keys sender_keys, Keys receiver_keys, string content);
    [Throws=NostrError, Name=delete]
    constructor(Keys keys, sequence<string> ids, optional string? reason = null);
    [Throws=NostrError, Name=new_reaction]
    constructor(Keys keys, Event event, boolean positive);
    boolean verify();
    [Throws=NostrError, Name=from_json]
    constructor(string json);
    [Throws=NostrError]
    string as_json();
};

interface Contact {
    [Throws=NostrError]
    constructor(string alias, string pk, string relay_url);
    string alias();
    string public_key();
    string relay_url();
};

interface AccountMetadata {
    constructor();
    [Self=ByArc]
    AccountMetadata name(string name);
    [Self=ByArc]
    AccountMetadata display_name(string display_name);
    [Self=ByArc]
    AccountMetadata about(string about);
    [Throws=NostrError, Self=ByArc]
    AccountMetadata picture(string picture);
    [Self=ByArc]
    AccountMetadata nip05(string nip05);
};