// Copyright (c) 2022 Yuki Kishimoto
// Distributed under the MIT software license

namespace nostrsdk {
    void init_logger(string? level);
    u64 timestamp();
};

[Error]
interface NostrError {
    Generic(string msg);
};

// NOSTR-SDK-BASE

enum KindBase {
    "Metadata",
    "TextNote",
    "RecommendRelay",
    "ContactList",
    "EncryptedDirectMessage",
    "EventDeletion",
    "Boost",
    "Reaction",
    "ChannelCreation",
    "ChannelMetadata",
    "ChannelMessage",
    "ChannelHideMessage",
    "ChannelMuteUser",
};

[Enum]
interface Kind {
    Base(KindBase kind);
    Custom(u16 kind);
};

interface Keys {
    [Throws=NostrError]
    constructor(string sk);
    [Throws=NostrError, Name=new_pub_only]
    constructor(string pk);
    [Throws=NostrError, Name=new_pub_only_from_bech32]
    constructor(string pk);
    [Throws=NostrError, Name=new_from_bech32]
    constructor(string sk);
    [Name=generate_from_os_random]
    constructor();
    string public_key();
    [Throws=NostrError]
    string secret_key();
};

interface SubscriptionFilter {
    constructor();
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter id(string id);
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter ids(sequence<string> ids);
    [Self=ByArc]
    SubscriptionFilter kind_custom(u16 kind_id);
    [Self=ByArc]
    SubscriptionFilter kind_base(KindBase kind_base);
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter event(string event_id);
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter pubkey(string pubkey);
    [Self=ByArc]
    SubscriptionFilter since(u64 timestamp);
    [Self=ByArc]
    SubscriptionFilter until(u64 timestamp);
    [Throws=NostrError, Self=ByArc]
    SubscriptionFilter authors(sequence<string> authors);
};

interface Event {
    string pubkey();
    Kind kind();
    string content();
    [Throws=NostrError, Name=backup_contacts]
    constructor(Keys keys, sequence<Contact> list);
    [Throws=NostrError, Name=new_encrypted_direct_msg]
    constructor(Keys sender_keys, Keys receiver_keys, string content);
    [Throws=NostrError, Name=delete]
    constructor(Keys keys, sequence<string> ids, string? reason);
    boolean verify();
    [Throws=NostrError, Name=new_from_json]
    constructor(string json);
    string as_json();
};

interface Contact {
    [Throws=NostrError]
    constructor(string alias, string pk, string relay_url);
    string alias();
    string public_key();
    string relay_url();
};

// NOSTR-SDK

[Enum]
interface RelayPoolNotifications {
    ReceivedEvent(string json);
    RelayDisconnected(string url);
};

interface Channel {
    constructor(string relay_url);
    string id();
    string relay_url();
};

interface Subscription {
    constructor();
    void update_filters(sequence<SubscriptionFilter> filters);
    sequence<SubscriptionFilter> get_filters();
    void add_channel(string relay_url, Channel channel);
    Channel? remove_channel(string relay_url);
    Channel get_channel(string relay_url);
};

interface Client {
    constructor(Keys keys, sequence<Contact>? contacts);
    void add_contact(Contact contact);
    void remove_contact(Contact contact);
    [Throws=NostrError]
    void add_relay(string url);
    void connect_relay(string url);
    void connect_all();
    void subscribe(sequence<SubscriptionFilter> filters);
    void send_event(Event event);
    [Self=ByArc]
    void run_thread();
};
